{"version":3,"sources":["Dimmer.js","App.js","serviceWorker.js","index.js"],"names":["getRandomInt","max","Math","floor","random","texts","showedNumbers","Dimmer","props","length","numToShow","includes","push","text","onClose","className","onClick","App","useState","dimmerOpened","setOpenDimmer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8OAGA,SAASA,EAAaC,GAClB,OAAOC,KAAKC,MAAMD,KAAKE,SAAWF,KAAKC,MAAMF,IAGjD,IAAII,EAAQ,CACR,4GACA,wJACA,8ZACA,0RACA,wVACA,sSACA,2gBACA,gVACA,+WACA,+OACA,gNACA,8OACA,s7BAEA,8VACA,mKACA,sQACA,2YACA,gMACA,0SACA,4TACA,mOACA,+GACA,8NACA,wOACA,qDAGAC,EAAgB,GA4BLC,EA1BA,SAACC,GACTF,EAAcG,SAAWJ,EAAMI,SAC9BH,EAAgB,IAGpB,IADA,IAAII,EAAYV,EAAaK,EAAMI,QAC7BH,EAAcK,SAASD,IACzBA,EAAYV,EAAaK,EAAMI,QAEnCH,EAAcM,KAAKF,GACnB,IAAIG,EAAOR,EAAMK,GACXI,EAAUN,EAAMM,QACtB,OACI,yBAAKC,UAAW,kBAAmBC,QAASF,GACxC,yBAAKC,UAAW,iBAEZ,6BAEQF,MCpCTI,MAff,WAAgB,IAAD,EAC2BC,oBAAS,GADpC,mBACJC,EADI,KACUC,EADV,KAEX,OACI,yBAAKL,UAAU,aACX,4BAAQA,UAAW,aAAcC,QAAS,kBAAMI,GAAc,KAA9D,4EAIID,GACI,kBAAC,EAAD,CAAQL,QAAS,kBAAIM,GAAc,QCDnCC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.4a44528a.chunk.js","sourcesContent":["import React from 'react';\n\n\nfunction getRandomInt(max) {\n    return Math.floor(Math.random() * Math.floor(max));\n}\n\nlet texts = [\n    'Ты мой бедный зайчик',\n    'Какая же ты сегодня красивая!',\n    'Сто тысяч бурундуков, котят и панд не сравнятся с тобой по мягкости и пушистости!',\n    'Ты очень красивая, а красивых девушек надо размножать!',\n    'Ваш оператор предупреждает: не будете улыбаться — мы вас отключим!',\n    'Внимание! Ты окружена любовью! Предлагаю срочно сдаться!',\n    'Жизнь без тебя нелепа, как в апреле сугробы из снега! Как коньки в середине июня, как жара зимы накануне!',\n    'Все будет супер! Все будет классно! Ты лучше всех — и это прекрасно!',\n    'В раю сказали, что от них сбежал самый красивый ангел… Но я тебя не выдал!',\n    'Если долго колебаться, можно всех заколебать..',\n    'Хуже, чем вчера может быть только завтра',\n    'Спешите жить, чтобы успеть начать все сначала',\n    'Что такое счастье? Это ты... твоя улыбка, теплое дыхание, ласковый шёпот нежных слов на ушко, поцелуи, твоя рука в моей... любовь...' +\n    'Цените то, что у вас есть. И никогда не думайте «а может». Может нет.',\n    'Любовь как война: легко начать, тяжело закончить, невозможно забыть',\n    'Смысл жизни имеет вкус поцелуя',\n    'Давай как в детстве? ты мне конфетку, а я тебя в щечку',\n    'Девушки мечтают о милых и заботливых парнях, но у таких парней уже есть парни',\n    'Сколько можно жаловаться, иди ботай!!!!',\n    'Эээээ, тебе никто кроме тебя самой не поможет, хватит ныть..',\n    'Посмотри на улицу, там светит солнышко, но ярче него только ты!',\n    'Буууу.. Я обиделась, успокой меня пожалуйста',\n    'Он тебя любит, правда..',\n    'Вот чем ты занята, уроки то кто делать будет',\n    'Так, быстро закрывай кампуктер и давай спать',\n    'Не грусти',\n];\n\nlet showedNumbers = [];\n\nconst Dimmer = (props) => {\n    if(showedNumbers.length === texts.length){\n        showedNumbers = [];\n    }\n    let numToShow = getRandomInt(texts.length);\n    while(showedNumbers.includes(numToShow))\n        numToShow = getRandomInt(texts.length);\n\n    showedNumbers.push(numToShow);\n    let text = texts[numToShow];\n    const onClose = props.onClose;\n    return (\n        <div className={'dimmerContainer'} onClick={onClose}>\n            <div className={'dimmerWrapper'}>\n\n                <div>\n                    {\n                        text\n                    }\n                </div>\n\n            </div>\n        </div>\n    )\n};\n\nexport default Dimmer;\n","import React, {useState} from 'react';\nimport './App.css';\nimport Dimmer from \"./Dimmer\";\n\nfunction App() {\n    const [dimmerOpened, setOpenDimmer] = useState(false);\n    return (\n        <div className=\"container\">\n            <button className={'mainButton'} onClick={() => setOpenDimmer(true)}>\n                Пожаловаться\n            </button>\n            {\n                dimmerOpened &&\n                    <Dimmer onClose={()=>setOpenDimmer(false)}/>\n            }\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}